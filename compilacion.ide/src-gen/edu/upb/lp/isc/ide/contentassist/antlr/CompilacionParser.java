/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import edu.upb.lp.isc.ide.contentassist.antlr.internal.InternalCompilacionParser;
import edu.upb.lp.isc.services.CompilacionGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class CompilacionParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CompilacionGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CompilacionGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getSimpleAccess().getAlternatives(), "rule__Simple__Alternatives");
			builder.put(grammarAccess.getImprimibleAccess().getAlternatives_1(), "rule__Imprimible__Alternatives_1");
			builder.put(grammarAccess.getNoImprimibleAccess().getAlternatives(), "rule__NoImprimible__Alternatives");
			builder.put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
			builder.put(grammarAccess.getDataType_Access().getAlternatives(), "rule__DataType___Alternatives");
			builder.put(grammarAccess.getIsDataTypeAccess().getAlternatives_1(), "rule__IsDataType__Alternatives_1");
			builder.put(grammarAccess.getOperadoresAccess().getOpAlternatives_0(), "rule__Operadores__OpAlternatives_0");
			builder.put(grammarAccess.getBoolean_OpAccess().getOpAlternatives_0(), "rule__Boolean_Op__OpAlternatives_0");
			builder.put(grammarAccess.getBoolAccess().getOpAlternatives_0(), "rule__Bool__OpAlternatives_0");
			builder.put(grammarAccess.getEqualAccess().getAlternatives(), "rule__Equal__Alternatives");
			builder.put(grammarAccess.getEqualAccess().getAlternatives_0_1_0(), "rule__Equal__Alternatives_0_1_0");
			builder.put(grammarAccess.getProgramaAccess().getGroup(), "rule__Programa__Group__0");
			builder.put(grammarAccess.getEjecucionAccess().getGroup(), "rule__Ejecucion__Group__0");
			builder.put(grammarAccess.getImprimibleAccess().getGroup(), "rule__Imprimible__Group__0");
			builder.put(grammarAccess.getIsDataTypeAccess().getGroup(), "rule__IsDataType__Group__0");
			builder.put(grammarAccess.getAritmeticaAccess().getGroup(), "rule__Aritmetica__Group__0");
			builder.put(grammarAccess.getVariablesAccess().getGroup(), "rule__Variables__Group__0");
			builder.put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
			builder.put(grammarAccess.getLargoListaAccess().getGroup(), "rule__LargoLista__Group__0");
			builder.put(grammarAccess.getFuncionSimplificadaAccess().getGroup(), "rule__FuncionSimplificada__Group__0");
			builder.put(grammarAccess.getEqualAccess().getGroup_0(), "rule__Equal__Group_0__0");
			builder.put(grammarAccess.getEqualAccess().getGroup_0_1(), "rule__Equal__Group_0_1__0");
			builder.put(grammarAccess.getEqualAccess().getGroup_1(), "rule__Equal__Group_1__0");
			builder.put(grammarAccess.getEqualAccess().getGroup_1_0(), "rule__Equal__Group_1_0__0");
			builder.put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
			builder.put(grammarAccess.getProgramaAccess().getNameAssignment_1(), "rule__Programa__NameAssignment_1");
			builder.put(grammarAccess.getProgramaAccess().getDeclaracionesAssignment_2(), "rule__Programa__DeclaracionesAssignment_2");
			builder.put(grammarAccess.getProgramaAccess().getEjecucionesAssignment_3(), "rule__Programa__EjecucionesAssignment_3");
			builder.put(grammarAccess.getImprimibleAccess().getVarAssignment_1_0(), "rule__Imprimible__VarAssignment_1_0");
			builder.put(grammarAccess.getImprimibleAccess().getFunAssignment_1_1(), "rule__Imprimible__FunAssignment_1_1");
			builder.put(grammarAccess.getNoImprimibleAccess().getVarAssignment_0(), "rule__NoImprimible__VarAssignment_0");
			builder.put(grammarAccess.getNoImprimibleAccess().getFunAssignment_1(), "rule__NoImprimible__FunAssignment_1");
			builder.put(grammarAccess.getMyIntAccess().getValueAssignment(), "rule__MyInt__ValueAssignment");
			builder.put(grammarAccess.getMyStringAccess().getValueAssignment(), "rule__MyString__ValueAssignment");
			builder.put(grammarAccess.getMyBoolAccess().getValueAssignment(), "rule__MyBool__ValueAssignment");
			builder.put(grammarAccess.getIsDataTypeAccess().getIsTypeAssignment_2(), "rule__IsDataType__IsTypeAssignment_2");
			builder.put(grammarAccess.getAritmeticaAccess().getOpAssignment_1(), "rule__Aritmetica__OpAssignment_1");
			builder.put(grammarAccess.getAritmeticaAccess().getArgumentAssignment_2(), "rule__Aritmetica__ArgumentAssignment_2");
			builder.put(grammarAccess.getOperadoresAccess().getOpAssignment(), "rule__Operadores__OpAssignment");
			builder.put(grammarAccess.getVariablesAccess().getNameAssignment_2(), "rule__Variables__NameAssignment_2");
			builder.put(grammarAccess.getVariablesAccess().getValAssignment_3(), "rule__Variables__ValAssignment_3");
			builder.put(grammarAccess.getBoolean_OpAccess().getOpAssignment(), "rule__Boolean_Op__OpAssignment");
			builder.put(grammarAccess.getBoolAccess().getOpAssignment(), "rule__Bool__OpAssignment");
			builder.put(grammarAccess.getListAccess().getTypeOfListAssignment_3(), "rule__List__TypeOfListAssignment_3");
			builder.put(grammarAccess.getAtributoAccess().getAtributoNameAssignment(), "rule__Atributo__AtributoNameAssignment");
			builder.put(grammarAccess.getFuncionSimplificadaAccess().getNameAssignment_3(), "rule__FuncionSimplificada__NameAssignment_3");
			builder.put(grammarAccess.getFuncionSimplificadaAccess().getAtributoAssignment_4(), "rule__FuncionSimplificada__AtributoAssignment_4");
			builder.put(grammarAccess.getFuncionSimplificadaAccess().getThenAssignment_7(), "rule__FuncionSimplificada__ThenAssignment_7");
			builder.put(grammarAccess.getEqualAccess().getN1Assignment_0_1_1(), "rule__Equal__N1Assignment_0_1_1");
			builder.put(grammarAccess.getEqualAccess().getN2Assignment_0_1_2(), "rule__Equal__N2Assignment_0_1_2");
			builder.put(grammarAccess.getIfAccess().getConditionAssignment_3(), "rule__If__ConditionAssignment_3");
			builder.put(grammarAccess.getIfAccess().getThenAssignment_6(), "rule__If__ThenAssignment_6");
			builder.put(grammarAccess.getIfAccess().getElseAssignment_9(), "rule__If__ElseAssignment_9");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CompilacionGrammarAccess grammarAccess;

	@Override
	protected InternalCompilacionParser createParser() {
		InternalCompilacionParser result = new InternalCompilacionParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CompilacionGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CompilacionGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
