grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals
generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
 	'Programa' name = ID 
	(declaraciones += Declaraciones)*
	(ejecuciones += Ejecucion)*
;

Ejecucion:
	'> ' Expr
;

Declaraciones:
	Simple 
;

Simple:
	Expr | Estructuras | Variable
;

Expr:
	( Data | Aritmetica | Equal  | FuncionSimplificada |Define| List_Cons_Operation )
;

Data:
	 ( MyInt | MyString | Bool | List | LlamarFuncion | Cons)
;
MyInt:
	value = INT
;
MyString:
	value = STRING
;

Aritmetica:
	'('op = (Operadores|Boolean_Op) argument+=(Argument) argument+=(Argument)+')'  //revisar + - * / aceptan si es solo un int pero los obligaremos a que sea dos //PREGUNTAR llamar funciones
															//el problema es que expt quotient remainder solo aceptan dos INT
															//pd si quieres agregar double en ves de Int es number
;

Operadores:
	op = ('=' | '+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')//revisar PREGUNTAR
;

Variable:
(  nombreaVar=ID  )  //supercheck
;
Boolean_Op: 
	op = ('<' | '>=' | '>' | '<=' )
;

Bool:
	value = ('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
;

Estructuras:
	 If   //por ver
;	
//klajdafs ñ.ñ
Cons:
	
	'(''cons' primer= (Argument) segundo=(Argument) ')'
;
List:
	 {List}	'(''list' data+=Data+')' 
	
;

List_Cons_Operation:
	'(' op = ('length'|'car'|'cdr'|'list-ref')  lYc = Simple')'//TODO
;

FuncionSimplificada: 
	'(' 'define' '(' name=ID (parameter+=Argument)*')' '(' then=Bloque')'  ')'//revisar    PREGUNTAR
;
Define:
	'define' '('(name= ID parameter=Argument) ')'
;
LlamarFuncion: 
	'(' nombreFuncion= [FuncionSimplificada] arguments+=(Argument)* ')'
;

Equal:
	'(' (('equal?' | 'eq?') data1=Data data2=Data) | (op=Boolean_Op data1=MyInt data2=MyInt)')'
	//revisar equal de listas co
	//n = no da con eq? da #f con equal? da #t podria hacer que en validation no deje usar equal si usa =
;

If://check
	'(' 
		'if' '(' condition = ( Equal | Aritmetica | LlamarFuncion)')'	
		('(') then = Bloque (')')
		 ('(' 'else' else = Bloque ')' )?
		
	')'
;

Bloque:
	Simple 
;

Argument:
	Variable|Expr
;
