grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals
generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
 //  '#lang racket'
	(declaraciones += Declaraciones)*
	(ejecuciones += Ejecucion)*
	
;

Ejecucion:
	'>' Expr
;

Declaraciones:
	Simple 
;

Simple:
	(Expr | Estructuras)
;

Expr:
	(DataType | Aritmetica | Equal  | Variables | FuncionSimplificada)
;

DataType:
	(INT | STRING | Bool | List)
;
IsDataType: 
	('number?' | 'string?' | 'list?' ) DataType //???? no se
;
Aritmetica:
	'(' Operadores INT INT (INT)* ')' //revisar + - * / aceptan si es solo un int pero los obligaremos a que sea dos //PREGUNTAR llamar funciones
		//el problema es que expt quotient remainder solo aceptan dos INT
		//pd si quieres agregar double en ves de Int es number
;

Operadores:
	('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')//revisar PREGUNTAR
;

Variables:
( '(' 'define' nombreaVar=ID DataType ')')  //supercheck
;

Boolean_Op: 
	('<' | '>=' | '>' | '<=' )
;

Bool:
	('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
;

Estructuras:
	 If   //por ver
;	

List:

	'(''list' ( (INT)+ | (STRING)+ | (Bool)+ | (List)+ ) ')' 
;

LargoLista:
	'(' 'lenght' List ')'//PREGUNTAR
;

CombinarLista:
	'comb'//TODO
;
PosicionLista:
	'pos' //TODO
;

Atributo:// aun por ver
	(atributoName=ID)
;

FuncionSimplificada:
	'(' 'define' '(' name=ID (n=DataType)*')' '(' then=Bloque ')' ')'//revisar    PREGUNTAR
;

Equal:
	'(' (('equal?' | 'eq?') n1=DataType n2=DataType) | (Boolean_Op INT INT)')'//revisar equal de listas co
		//n = no da con eq? da #f con equal? da #t podria hacer que en validation no deje usar equal si usa =
;

//BooleanExpression:
//	Boolean_Op expr1=Expr expr2=Expr  //no se para que es esto
//;

If://check
	'(' 'if' '(' condition = Equal ')'	
		('(')? then = Bloque (')')?
		'(' else = Bloque ')' ')'
;

Bloque:
	Simple 
;
