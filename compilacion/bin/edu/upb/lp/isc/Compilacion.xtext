grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals
generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
 	'Programa' name = ID 
	(declaraciones += Declaraciones)*
	(ejecuciones += Ejecucion)*
;

Ejecucion:
	'> ' Expr
;

Declaraciones:
	Simple 
;

Simple:
	Estructuras | Argument
;

Expr:
	( Data | Aritmetica | Equal  | FuncionSimplificada |Define| List_Cons_Operation | LlamarFuncion | Cons)
;

Data:
	 ( MyInt | MyString | Bool | List )
;
MyInt:
	value = INT
;
MyString:
	value = STRING
;

Aritmetica:
	'('op = (AllOp) argument+=(Argument) argument+=(Argument)+')'
;
AllOp:
	Operadores|Boolean_Op
;

Operadores:
	op = ('=' | '+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')
;

Variable:
(  nombreaVar=ID  )  
;
Boolean_Op: 
	op = ('<' | '>=' | '>' | '<=' )
;

Bool:
	value = ('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
;

Estructuras:
	 If   
;	

Cons:
	
	'(''cons' primer= (Argument) segundo=(Argument) ')'
;
List:
	 {List}	'(''list' data+=Data+')' 
	
;

List_Cons_Operation:
	'(' op = ('length'|'car'|'cdr'|'list-ref')  lYc = Simple')'//TODO
;

FuncionSimplificada: 
	'(' 'define' '(' name=ID (parameter+=Argument)*')' '(' then=Bloque')'  ')'
;
Define:
	'define' '('(name= ID parameter=Argument) ')'
;
LlamarFuncion: 
	'(' nombreFuncion= [FuncionSimplificada] arguments+=(Argument)* ')'
;

Equal:
	'[' ((('equal?' | 'eq?') data1=Argument data2=Argument) | (op=Boolean_Op data1=MyInt data2=MyInt))']'
;

If:
	'(' 
		'if' '(' condition = ( CondicionIF)')'	
		'(' then = Bloque ')'
		 ( 'else' '('else = Bloque ')' )?
		
	')'
;
CondicionIF:
	Equal|Aritmetica|LlamarFuncion
;

Bloque:
	Simple 
;

Argument:
	Variable|Expr
;
