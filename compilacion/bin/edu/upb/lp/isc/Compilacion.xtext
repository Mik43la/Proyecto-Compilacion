grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals
generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
 //  '#lang racket'
	(declaraciones += Declaraciones)*
	(ejecuciones += Ejecucion)*
	
;

Ejecucion:
	'>' Expr//revisar
;

Declaraciones:
	Simple 
;

Simple:
	((expr+=Expr)+ | (estructura+=Estructuras)*)
;

Expr:
	(DataType | Aritmetica | Equal  | Define | FuncionSimplificada)
;



Number: 
	INT | Double //| Fractions
;

Digit:
	('0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9')
;

Double: 
	INT'.'Digit Digit 
;
DataType:
	(INT | STRING | Bool | Double | List)
;
IsDataType: 
	('number?' | 'string?' | 'list?' ) DataType //???? no se
;
Aritmetica:
	'(' Operacion INT INT (INT)* ')' //revisar + - * / aceptan si es solo un int pero los obligaremos a que sea dos
		//el problema es que expt quotient remainder solo aceptan dos INT
		//pd si quieres agregar double en ves de Int es number
;

Operacion:
	('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')//revisar
;

Variables:
( '(' 'define' nombreaVar=ID DataType ')')  //supercheck
;

Boolean_Op: 
	('<' | '>=' | '>' | '<=' | '=')
;

Bool:
	('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
;

Estructuras:
	 If   //por ver
;

IterableDataType:
	STRING|List//revisar donde se usa??
;
	

List:

	'(''list' ( (Number)+ | (STRING)+ | (Bool)+ | (List)+ ) ')' //check ver lo del number
;

Define: //revisar
	'(' 'define' name=ID 
	'('  (atributos+=[Atributo])* (Funcion)? ')'
	')'//(define "Hello World" (hello-world2) )
;

Atributo:// aun por ver
	(atributoName=ID | Funcion)
;

Funcion://hacer el simplificado
	'(' ( 'lambda') "(" ")" DataType ")"//TODO
;

FuncionSimplificada:
	'(' 'define' '(' name=ID ')' DataType ')'
;

Equal:
	'(' ('=' | 'equal?' | 'eq?') DataType DataType')'//revisar equal de listas co
		//n = no da con eq? da #f con equal? da #t podria hacer que en validation no deje usar equal si usa =
;

//BooleanExpression:
//	Boolean_Op expr1=Expr expr2=Expr  //no se para que es esto
//;

If://check
	
	'(' 'if' '(' condition = Equal ')'	
		('(')? then = Bloque (')')?
		'(' else = Bloque ')' ')'
		
;
Bloque:
	Simple 
;
