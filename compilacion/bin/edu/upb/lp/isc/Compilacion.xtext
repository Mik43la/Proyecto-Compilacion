grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals

generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
<<<<<<< Updated upstream
=======
   '#lang racket'
>>>>>>> Stashed changes
	(declaraciones += Declaraciones)*
	
;

Declaraciones:
	(simple = Simple | compuesta = Compuesta)
;

Simple:
<<<<<<< Updated upstream
	(Expr )
;

Compuesta:
	(Expr)
//	('class' name=ID ':' '\n' classBLock = ClassBLock | 'def' name=ID '(' (atibutos=ID Optctc (',')+)* ')' ':' '\n' Block | 
	//	'if' Expr ":" Block ('elif' Expr ';' Block)* ('else' ':' Block)?) |
	//'for' name=ID 'in' Expr ':' Block | 'struct' name=ID ':' structBlock=StructBLock | 'while' Expr ':' Block)
		
=======
	((expr+=Expr)+ | 'pass' | 'break' | 'continue')
;

Compuesta:
	Clase|Estructuras|Define
>>>>>>> Stashed changes
;

Expr:
	(DataType | Aritmetica | Equal | Estructuras | Funcion)
;

Clase:
	//TODO inserte aqui como hacer clases
	'clase' '....' '{' Bloque '}'
;

<<<<<<< Updated upstream
=======
Number: 
	INT | Double //| Fractions
;

Double: 
	INT'.'INT //se tendria solo poder poner dos decimales
;
>>>>>>> Stashed changes
DataType:
	(INT | STRING | BOOL)
;

Aritmetica:
	'(' Operacion INT INT (INT)* ')'
;

Operacion:
	('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')
;

Variables:
	'(' 'define' nombreaVar=ID DataType ')'
;

//TODO let??
BOOL:
	('#T' | '#F' | '#t' | '#f' | '#true' | '#True' | '#false' | '#False')
;

Estructuras:
	Struct | If | For | While  //TODO agregar for y while
;

For:
	'For' '...' Bloque//TODO
;

While:
	'while' '...' Bloque//TODO
;
Struct:
	"(" "struct" name=ID "(" (atributo += Atributo)* ")" ")"
;



Define:
	'(' 'define' name=ID 
		'(' structName=[Struct] (atributos+=[Atributo])* ')'//(define (hello-world2) "Hello World")
;

Atributo:
	(atributoName=ID | Funcion)
;

Funcion:
	'(' ('lambda') "("")" DataType ")"
;

Equal:
	'(' '=' dat1=DataType dat2=DataType')'
;

If:
<<<<<<< Updated upstream
	'if' (Equal | BOOL)
		Bloque
		
;
=======
	//'if' (Equal | BOOL)
		//Bloque
	'if' '(' condition = ( Equal | Bool ) ')'	
		then = Bloque
		(=> 'else' else = Expr)?
		
;
Bloque:
	Simple 
;
//maybe not necessary MAYBEnot
//Error: 
//	'error' STRING
//;
//Cond:
//	'(' 
//	('[''(' Boolean_Op Number Number')' '(' Error ')'']')+
//	'[''else' (STRING | Number | Aritmetica) ']'
//	')'
//;
>>>>>>> Stashed changes

Bloque:
	'TODO'//TODO aqui deberia ir Simple
;