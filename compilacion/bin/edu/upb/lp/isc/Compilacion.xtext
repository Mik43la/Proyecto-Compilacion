grammar edu.upb.lp.isc.Compilacion with org.eclipse.xtext.common.Terminals

generate compilacion "http://www.upb.edu/lp/isc/Compilacion"

//cond define else keywords
Programa: 
   '#lang racket'
	(declaraciones += Declaraciones)*
	
;
Declaraciones:
	(simple = Simple | compuesta = Compuesta)
;

Simple:
	((expr+=Expr)+ | 'pass' | 'break' | 'continue')
;

Compuesta:
	Clase|Estructuras|Define
;

Expr:
	(DataType | Aritmetica | Equal | Estructuras | Funcion)
;

Clase:
	//TODO inserte aqui como hacer clases
	'clase' '....' '{' Bloque '}'
;

Number: 
	INT | Double //| Fractions
;

Double: 
	INT'.'INT //se tendria solo poder poner dos decimales
;
DataType:
	(INT | STRING | Bool | Double)
;

Aritmetica:
	'(' Operacion INT INT (INT)* ')'
;

Operacion:
	('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')
;
Boolean_Op: 
	('<' | '>=' | '>' | '<=' )
;
//TODO let??
Bool:
	('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
;
Variables:
	( '(' 'define' nombreaVar=ID DataType ')') 
;

Estructuras:
	Struct | If | For | While  //TODO agregar for y while
;

For:
	'For' '...' Bloque//TODO
;

While:
	'while' '...' Bloque//TODO
;
Struct:
	"(" "struct" name=ID "(" (atributo += Atributo)* ")" ")"
;

List:
	'(''list' ( (Number)+ | (STRING)+ | (Bool)+ | (List)+ ) ')' 
;
Define: 
	'(' 'define' name=ID 
	'(' structName=[Struct] (atributos+=[Atributo])* ')'
	')'//(define (hello-world2) "Hello World")
;
Atributo:
	(atributoName=ID | Funcion)
;
Funcion:
	'(' ( 'lambda') "(" ")" DataType ")"
;

Equal:
	'(' ('=' | 'equal?' | 'eq?') dat1=DataType dat2=DataType')'
;
 
If:
	//'if' (Equal | BOOL)
		//Bloque
	'if' '(' condition = ( Equal | Bool ) ')'	
		then = Bloque
		(=> 'else' else = Expr)?
		
;
Bloque:
	Simple 
;
//maybe not necessary MAYBEnot
//Error: 
//	'error' STRING
//;
//Cond:
//	'(' 
//	('[''(' Boolean_Op Number Number')' '(' Error ')'']')+
//	'[''else' (STRING | Number | Aritmetica) ']'
//	')'
//;
