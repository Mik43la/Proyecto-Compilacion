/*
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class CompilacionGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Programa");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDeclaracionesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDeclaracionesDeclaracionesParserRuleCall_2_0 = (RuleCall)cDeclaracionesAssignment_2.eContents().get(0);
		private final Assignment cEjecucionesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEjecucionesEjecucionParserRuleCall_3_0 = (RuleCall)cEjecucionesAssignment_3.eContents().get(0);
		
		////Lista de any no
		////cond define else keywords
		//Programa:
		// //  '#lang racket'
		//     'Programa' name = ID
		//    (declaraciones += Declaraciones)*
		//    (ejecuciones += Ejecucion)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////  '#lang racket'
		//    'Programa' name = ID
		//   (declaraciones += Declaraciones)*
		//   (ejecuciones += Ejecucion)*
		public Group getGroup() { return cGroup; }
		
		////  '#lang racket'
		//    'Programa'
		public Keyword getProgramaKeyword_0() { return cProgramaKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(declaraciones += Declaraciones)*
		public Assignment getDeclaracionesAssignment_2() { return cDeclaracionesAssignment_2; }
		
		//Declaraciones
		public RuleCall getDeclaracionesDeclaracionesParserRuleCall_2_0() { return cDeclaracionesDeclaracionesParserRuleCall_2_0; }
		
		//(ejecuciones += Ejecucion)*
		public Assignment getEjecucionesAssignment_3() { return cEjecucionesAssignment_3; }
		
		//Ejecucion
		public RuleCall getEjecucionesEjecucionParserRuleCall_3_0() { return cEjecucionesEjecucionParserRuleCall_3_0; }
	}
	public class EjecucionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Ejecucion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//Ejecucion:
		//    '>' Expr
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' Expr
		public Group getGroup() { return cGroup; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1() { return cExprParserRuleCall_1; }
	}
	public class DeclaracionesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Declaraciones");
		private final RuleCall cSimpleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Declaraciones:
		//    Simple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Simple
		public RuleCall getSimpleParserRuleCall() { return cSimpleParserRuleCall; }
	}
	public class SimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Simple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEstructurasParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Simple:
		//    Expr | Estructuras
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Expr | Estructuras
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }
		
		//Estructuras
		public RuleCall getEstructurasParserRuleCall_1() { return cEstructurasParserRuleCall_1; }
	}
	public class ImprimibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Imprimible");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final CrossReference cVarVariablesCrossReference_1_0_0 = (CrossReference)cVarAssignment_1_0.eContents().get(0);
		private final RuleCall cVarVariablesIDTerminalRuleCall_1_0_0_1 = (RuleCall)cVarVariablesCrossReference_1_0_0.eContents().get(1);
		private final Assignment cFunAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final CrossReference cFunFuncionSimplificadaCrossReference_1_1_0 = (CrossReference)cFunAssignment_1_1.eContents().get(0);
		private final RuleCall cFunFuncionSimplificadaIDTerminalRuleCall_1_1_0_1 = (RuleCall)cFunFuncionSimplificadaCrossReference_1_1_0.eContents().get(1);
		
		//Imprimible:
		//    '>' (var=[Variables] |fun=[FuncionSimplificada])
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'>' (var=[Variables] |fun=[FuncionSimplificada])
		public Group getGroup() { return cGroup; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0() { return cGreaterThanSignKeyword_0; }
		
		//(var=[Variables] |fun=[FuncionSimplificada])
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//var=[Variables]
		public Assignment getVarAssignment_1_0() { return cVarAssignment_1_0; }
		
		//[Variables]
		public CrossReference getVarVariablesCrossReference_1_0_0() { return cVarVariablesCrossReference_1_0_0; }
		
		//ID
		public RuleCall getVarVariablesIDTerminalRuleCall_1_0_0_1() { return cVarVariablesIDTerminalRuleCall_1_0_0_1; }
		
		//fun=[FuncionSimplificada]
		public Assignment getFunAssignment_1_1() { return cFunAssignment_1_1; }
		
		//[FuncionSimplificada]
		public CrossReference getFunFuncionSimplificadaCrossReference_1_1_0() { return cFunFuncionSimplificadaCrossReference_1_1_0; }
		
		//ID
		public RuleCall getFunFuncionSimplificadaIDTerminalRuleCall_1_1_0_1() { return cFunFuncionSimplificadaIDTerminalRuleCall_1_1_0_1; }
	}
	public class NoImprimibleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.NoImprimible");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cVarVariablesCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarVariablesIDTerminalRuleCall_0_0_1 = (RuleCall)cVarVariablesCrossReference_0_0.eContents().get(1);
		private final Assignment cFunAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cFunFuncionSimplificadaCrossReference_1_0 = (CrossReference)cFunAssignment_1.eContents().get(0);
		private final RuleCall cFunFuncionSimplificadaIDTerminalRuleCall_1_0_1 = (RuleCall)cFunFuncionSimplificadaCrossReference_1_0.eContents().get(1);
		
		//NoImprimible:
		//    var=[Variables] | fun=[FuncionSimplificada]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Variables] | fun=[FuncionSimplificada]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//var=[Variables]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Variables]
		public CrossReference getVarVariablesCrossReference_0_0() { return cVarVariablesCrossReference_0_0; }
		
		//ID
		public RuleCall getVarVariablesIDTerminalRuleCall_0_0_1() { return cVarVariablesIDTerminalRuleCall_0_0_1; }
		
		//fun=[FuncionSimplificada]
		public Assignment getFunAssignment_1() { return cFunAssignment_1; }
		
		//[FuncionSimplificada]
		public CrossReference getFunFuncionSimplificadaCrossReference_1_0() { return cFunFuncionSimplificadaCrossReference_1_0; }
		
		//ID
		public RuleCall getFunFuncionSimplificadaIDTerminalRuleCall_1_0_1() { return cFunFuncionSimplificadaIDTerminalRuleCall_1_0_1; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDataType_ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAritmeticaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEqualParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariablesParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFuncionSimplificadaParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Expr:
		//    (DataType_ | Aritmetica | Equal  | Variables | FuncionSimplificada  )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(DataType_ | Aritmetica | Equal  | Variables | FuncionSimplificada  )
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DataType_
		public RuleCall getDataType_ParserRuleCall_0() { return cDataType_ParserRuleCall_0; }
		
		//Aritmetica
		public RuleCall getAritmeticaParserRuleCall_1() { return cAritmeticaParserRuleCall_1; }
		
		//Equal
		public RuleCall getEqualParserRuleCall_2() { return cEqualParserRuleCall_2; }
		
		//Variables
		public RuleCall getVariablesParserRuleCall_3() { return cVariablesParserRuleCall_3; }
		
		//FuncionSimplificada
		public RuleCall getFuncionSimplificadaParserRuleCall_4() { return cFuncionSimplificadaParserRuleCall_4; }
	}
	public class DataType_Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.DataType_");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMyIntParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMyStringParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMyBoolParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cListParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//DataType_:
		//     ( MyInt | MyString | MyBool | List)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( MyInt | MyString | MyBool | List)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MyInt
		public RuleCall getMyIntParserRuleCall_0() { return cMyIntParserRuleCall_0; }
		
		//MyString
		public RuleCall getMyStringParserRuleCall_1() { return cMyStringParserRuleCall_1; }
		
		//MyBool
		public RuleCall getMyBoolParserRuleCall_2() { return cMyBoolParserRuleCall_2; }
		
		//List
		public RuleCall getListParserRuleCall_3() { return cListParserRuleCall_3; }
	}
	public class MyIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.MyInt");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MyInt:
		//    value = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class MyStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.MyString");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MyString:
		//    value = STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value = STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class MyBoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.MyBool");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueBoolParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//MyBool: /////////
		//    value = Bool
		//;
		@Override public ParserRule getRule() { return rule; }
		
		///////////
		//   value = Bool
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//Bool
		public RuleCall getValueBoolParserRuleCall_0() { return cValueBoolParserRuleCall_0; }
	}
	public class IsDataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.IsDataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cNumberKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cStringKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cListKeyword_1_2 = (Keyword)cAlternatives_1.eContents().get(2);
		private final Assignment cIsTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsTypeDataType_ParserRuleCall_2_0 = (RuleCall)cIsTypeAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//IsDataType:
		//    '(' ('number?' | 'string?' | 'list?' ) isType=DataType_ ')'//???? no se
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' ('number?' | 'string?' | 'list?' ) isType=DataType_ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//('number?' | 'string?' | 'list?' )
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'number?'
		public Keyword getNumberKeyword_1_0() { return cNumberKeyword_1_0; }
		
		//'string?'
		public Keyword getStringKeyword_1_1() { return cStringKeyword_1_1; }
		
		//'list?'
		public Keyword getListKeyword_1_2() { return cListKeyword_1_2; }
		
		//isType=DataType_
		public Assignment getIsTypeAssignment_2() { return cIsTypeAssignment_2; }
		
		//DataType_
		public RuleCall getIsTypeDataType_ParserRuleCall_2_0() { return cIsTypeDataType_ParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AritmeticaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Aritmetica");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOpOperadoresParserRuleCall_1_0 = (RuleCall)cOpAssignment_1.eContents().get(0);
		private final Assignment cArgumentAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentMyIntParserRuleCall_2_0 = (RuleCall)cArgumentAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Aritmetica:
		//    '(' op = Operadores (argument+=(MyInt))+ ')' //revisar + - * / aceptan si es solo un int pero los obligaremos a que sea dos //PREGUNTAR llamar funciones
		//        //el problema es que expt quotient remainder solo aceptan dos INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' op = Operadores (argument+=(MyInt))+ ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//op = Operadores
		public Assignment getOpAssignment_1() { return cOpAssignment_1; }
		
		//Operadores
		public RuleCall getOpOperadoresParserRuleCall_1_0() { return cOpOperadoresParserRuleCall_1_0; }
		
		//(argument+=(MyInt))+
		public Assignment getArgumentAssignment_2() { return cArgumentAssignment_2; }
		
		//(MyInt)
		public RuleCall getArgumentMyIntParserRuleCall_2_0() { return cArgumentMyIntParserRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class OperadoresElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Operadores");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpAsteriskKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		private final Keyword cOpSolidusKeyword_0_3 = (Keyword)cOpAlternatives_0.eContents().get(3);
		private final Keyword cOpExptKeyword_0_4 = (Keyword)cOpAlternatives_0.eContents().get(4);
		private final Keyword cOpQuotientKeyword_0_5 = (Keyword)cOpAlternatives_0.eContents().get(5);
		private final Keyword cOpRemainderKeyword_0_6 = (Keyword)cOpAlternatives_0.eContents().get(6);
		
		//Operadores:
		//    op = ('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')//revisar PREGUNTAR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op = ('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_0_0() { return cOpPlusSignKeyword_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_1() { return cOpHyphenMinusKeyword_0_1; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_0_2() { return cOpAsteriskKeyword_0_2; }
		
		//'/'
		public Keyword getOpSolidusKeyword_0_3() { return cOpSolidusKeyword_0_3; }
		
		//'expt'
		public Keyword getOpExptKeyword_0_4() { return cOpExptKeyword_0_4; }
		
		//'quotient'
		public Keyword getOpQuotientKeyword_0_5() { return cOpQuotientKeyword_0_5; }
		
		//'remainder'
		public Keyword getOpRemainderKeyword_0_6() { return cOpRemainderKeyword_0_6; }
	}
	public class VariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cValAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValDataType_ParserRuleCall_3_0 = (RuleCall)cValAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Variables:
		//( '(' 'define' name=ID val = DataType_ ')')  //supercheck
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//( '(' 'define' name=ID val = DataType_ ')')
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'define'
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//val = DataType_
		public Assignment getValAssignment_3() { return cValAssignment_3; }
		
		//DataType_
		public RuleCall getValDataType_ParserRuleCall_3_0() { return cValDataType_ParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class Boolean_OpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Boolean_Op");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpLessThanSignKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		private final Keyword cOpLessThanSignEqualsSignKeyword_0_3 = (Keyword)cOpAlternatives_0.eContents().get(3);
		
		//Boolean_Op:
		//    op = ('<' | '>=' | '>' | '<=' )
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op = ('<' | '>=' | '>' | '<=' )
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('<' | '>=' | '>' | '<=' )
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_0_0() { return cOpLessThanSignKeyword_0_0; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_0_1() { return cOpGreaterThanSignEqualsSignKeyword_0_1; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_0_2() { return cOpGreaterThanSignKeyword_0_2; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_0_3() { return cOpLessThanSignEqualsSignKeyword_0_3; }
	}
	public class BoolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Bool");
		private final Assignment cOpAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOpAlternatives_0 = (Alternatives)cOpAssignment.eContents().get(0);
		private final Keyword cOpTKeyword_0_0 = (Keyword)cOpAlternatives_0.eContents().get(0);
		private final Keyword cOpFKeyword_0_1 = (Keyword)cOpAlternatives_0.eContents().get(1);
		private final Keyword cOpTKeyword_0_2 = (Keyword)cOpAlternatives_0.eContents().get(2);
		private final Keyword cOpFKeyword_0_3 = (Keyword)cOpAlternatives_0.eContents().get(3);
		private final Keyword cOpTrueKeyword_0_4 = (Keyword)cOpAlternatives_0.eContents().get(4);
		private final Keyword cOpFalseKeyword_0_5 = (Keyword)cOpAlternatives_0.eContents().get(5);
		private final Keyword cOpTrueKeyword_0_6 = (Keyword)cOpAlternatives_0.eContents().get(6);
		private final Keyword cOpFalseKeyword_0_7 = (Keyword)cOpAlternatives_0.eContents().get(7);
		
		//Bool:
		//    op = ('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//op = ('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
		public Assignment getOpAssignment() { return cOpAssignment; }
		
		//('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
		public Alternatives getOpAlternatives_0() { return cOpAlternatives_0; }
		
		//'#T'
		public Keyword getOpTKeyword_0_0() { return cOpTKeyword_0_0; }
		
		//'#F'
		public Keyword getOpFKeyword_0_1() { return cOpFKeyword_0_1; }
		
		//'#t'
		public Keyword getOpTKeyword_0_2() { return cOpTKeyword_0_2; }
		
		//'#f'
		public Keyword getOpFKeyword_0_3() { return cOpFKeyword_0_3; }
		
		//'#true'
		public Keyword getOpTrueKeyword_0_4() { return cOpTrueKeyword_0_4; }
		
		//'#false'
		public Keyword getOpFalseKeyword_0_5() { return cOpFalseKeyword_0_5; }
		
		//'true'
		public Keyword getOpTrueKeyword_0_6() { return cOpTrueKeyword_0_6; }
		
		//'false'
		public Keyword getOpFalseKeyword_0_7() { return cOpFalseKeyword_0_7; }
	}
	public class EstructurasElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Estructuras");
		private final RuleCall cIfParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Estructuras:
		//     If   //por ver
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//If
		public RuleCall getIfParserRuleCall() { return cIfParserRuleCall; }
	}
	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cListAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cListKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeOfListAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeOfListDataType_ParserRuleCall_3_0 = (RuleCall)cTypeOfListAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//List:
		//     {List}    '(''list'  (typeOfList+=DataType_)+ ')'
		//    //{List}'(''list'  typeOfList = ( (INT)+ | (STRING)+ | (Bool)+ | (List)+ ) ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{List}	'(''list'  (typeOfList+=DataType_)+ ')'
		public Group getGroup() { return cGroup; }
		
		//{List}
		public Action getListAction_0() { return cListAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//'list'
		public Keyword getListKeyword_2() { return cListKeyword_2; }
		
		//(typeOfList+=DataType_)+
		public Assignment getTypeOfListAssignment_3() { return cTypeOfListAssignment_3; }
		
		//DataType_
		public RuleCall getTypeOfListDataType_ParserRuleCall_3_0() { return cTypeOfListDataType_ParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class LargoListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.LargoLista");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLenghtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cListParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LargoLista:
		//    '(' 'lenght' List ')'//PREGUNTAR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'lenght' List ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'lenght'
		public Keyword getLenghtKeyword_1() { return cLenghtKeyword_1; }
		
		//List
		public RuleCall getListParserRuleCall_2() { return cListParserRuleCall_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CombinarListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.CombinarLista");
		private final Keyword cCombKeyword = (Keyword)rule.eContents().get(1);
		
		//CombinarLista:
		//    'comb'//TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'comb'
		public Keyword getCombKeyword() { return cCombKeyword; }
	}
	public class PosicionListaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.PosicionLista");
		private final Keyword cPosKeyword = (Keyword)rule.eContents().get(1);
		
		//PosicionLista:
		//    'pos' //TODO
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'pos'
		public Keyword getPosKeyword() { return cPosKeyword; }
	}
	public class AtributoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Atributo");
		private final Assignment cAtributoNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cAtributoNameIDTerminalRuleCall_0 = (RuleCall)cAtributoNameAssignment.eContents().get(0);
		
		//Atributo:// aun por ver
		//    (atributoName=ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//// aun por ver
		//    (atributoName=ID)
		public Assignment getAtributoNameAssignment() { return cAtributoNameAssignment; }
		
		//ID
		public RuleCall getAtributoNameIDTerminalRuleCall_0() { return cAtributoNameIDTerminalRuleCall_0; }
	}
	public class FuncionSimplificadaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.FuncionSimplificada");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDefineKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cAtributoAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAtributoDataType_ParserRuleCall_4_0 = (RuleCall)cAtributoAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cThenAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cThenBloqueParserRuleCall_7_0 = (RuleCall)cThenAssignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FuncionSimplificada:
		//    '(' 'define' '(' name=ID (atributo+=DataType_)*')' '(' then=Bloque ')' ')'//revisar    PREGUNTAR
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' 'define' '(' name=ID (atributo+=DataType_)*')' '(' then=Bloque ')' ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'define'
		public Keyword getDefineKeyword_1() { return cDefineKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(atributo+=DataType_)*
		public Assignment getAtributoAssignment_4() { return cAtributoAssignment_4; }
		
		//DataType_
		public RuleCall getAtributoDataType_ParserRuleCall_4_0() { return cAtributoDataType_ParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6() { return cLeftParenthesisKeyword_6; }
		
		//then=Bloque
		public Assignment getThenAssignment_7() { return cThenAssignment_7; }
		
		//Bloque
		public RuleCall getThenBloqueParserRuleCall_7_0() { return cThenBloqueParserRuleCall_7_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class EqualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Equal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Keyword cEqualKeyword_0_1_0_0 = (Keyword)cAlternatives_0_1_0.eContents().get(0);
		private final Keyword cEqKeyword_0_1_0_1 = (Keyword)cAlternatives_0_1_0.eContents().get(1);
		private final Assignment cN1Assignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cN1DataType_ParserRuleCall_0_1_1_0 = (RuleCall)cN1Assignment_0_1_1.eContents().get(0);
		private final Assignment cN2Assignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cN2DataType_ParserRuleCall_0_1_2_0 = (RuleCall)cN2Assignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final RuleCall cBoolean_OpParserRuleCall_1_0_0 = (RuleCall)cGroup_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_0_2 = (RuleCall)cGroup_1_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Equal:
		//    '(' (('equal?' | 'eq?') n1=DataType_ n2=DataType_) | (Boolean_Op INT INT)')'//revisar equal de listas co
		//        //n = no da con eq? da #f con equal? da #t podria hacer que en validation no deje usar equal si usa =
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' (('equal?' | 'eq?') n1=DataType_ n2=DataType_) | (Boolean_Op INT INT)')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' (('equal?' | 'eq?') n1=DataType_ n2=DataType_)
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//(('equal?' | 'eq?') n1=DataType_ n2=DataType_)
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//('equal?' | 'eq?')
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }
		
		//'equal?'
		public Keyword getEqualKeyword_0_1_0_0() { return cEqualKeyword_0_1_0_0; }
		
		//'eq?'
		public Keyword getEqKeyword_0_1_0_1() { return cEqKeyword_0_1_0_1; }
		
		//n1=DataType_
		public Assignment getN1Assignment_0_1_1() { return cN1Assignment_0_1_1; }
		
		//DataType_
		public RuleCall getN1DataType_ParserRuleCall_0_1_1_0() { return cN1DataType_ParserRuleCall_0_1_1_0; }
		
		//n2=DataType_
		public Assignment getN2Assignment_0_1_2() { return cN2Assignment_0_1_2; }
		
		//DataType_
		public RuleCall getN2DataType_ParserRuleCall_0_1_2_0() { return cN2DataType_ParserRuleCall_0_1_2_0; }
		
		//(Boolean_Op INT INT)')'
		public Group getGroup_1() { return cGroup_1; }
		
		//(Boolean_Op INT INT)
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//Boolean_Op
		public RuleCall getBoolean_OpParserRuleCall_1_0_0() { return cBoolean_OpParserRuleCall_1_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_1() { return cINTTerminalRuleCall_1_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_2() { return cINTTerminalRuleCall_1_0_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_1() { return cRightParenthesisKeyword_1_1; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionEqualParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cThenAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cThenBloqueParserRuleCall_6_0 = (RuleCall)cThenAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cElseAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cElseBloqueParserRuleCall_9_0 = (RuleCall)cElseAssignment_9.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		////BooleanExpression:
		////    Boolean_Op expr1=Expr expr2=Expr  //no se para que es esto
		////;
		//If://check
		//    '(' 'if' '(' condition = Equal ')'
		//        ('(')? then = Bloque (')')?
		//        '(' else = Bloque ')' ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////check
		//    '(' 'if' '(' condition = Equal ')'
		//        ('(')? then = Bloque (')')?
		//        '(' else = Bloque ')' ')'
		public Group getGroup() { return cGroup; }
		
		////check
		//    '('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//condition = Equal
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//Equal
		public RuleCall getConditionEqualParserRuleCall_3_0() { return cConditionEqualParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//('(')?
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//then = Bloque
		public Assignment getThenAssignment_6() { return cThenAssignment_6; }
		
		//Bloque
		public RuleCall getThenBloqueParserRuleCall_6_0() { return cThenBloqueParserRuleCall_6_0; }
		
		//(')')?
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//else = Bloque
		public Assignment getElseAssignment_9() { return cElseAssignment_9; }
		
		//Bloque
		public RuleCall getElseBloqueParserRuleCall_9_0() { return cElseBloqueParserRuleCall_9_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_10() { return cRightParenthesisKeyword_10; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class BloqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "edu.upb.lp.isc.Compilacion.Bloque");
		private final RuleCall cSimpleParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Bloque:
		//    Simple
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Simple
		public RuleCall getSimpleParserRuleCall() { return cSimpleParserRuleCall; }
	}
	
	
	private final ProgramaElements pPrograma;
	private final EjecucionElements pEjecucion;
	private final DeclaracionesElements pDeclaraciones;
	private final SimpleElements pSimple;
	private final ImprimibleElements pImprimible;
	private final NoImprimibleElements pNoImprimible;
	private final ExprElements pExpr;
	private final DataType_Elements pDataType_;
	private final MyIntElements pMyInt;
	private final MyStringElements pMyString;
	private final MyBoolElements pMyBool;
	private final IsDataTypeElements pIsDataType;
	private final AritmeticaElements pAritmetica;
	private final OperadoresElements pOperadores;
	private final VariablesElements pVariables;
	private final Boolean_OpElements pBoolean_Op;
	private final BoolElements pBool;
	private final EstructurasElements pEstructuras;
	private final ListElements pList;
	private final LargoListaElements pLargoLista;
	private final CombinarListaElements pCombinarLista;
	private final PosicionListaElements pPosicionLista;
	private final AtributoElements pAtributo;
	private final FuncionSimplificadaElements pFuncionSimplificada;
	private final EqualElements pEqual;
	private final IfElements pIf;
	private final BloqueElements pBloque;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public CompilacionGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPrograma = new ProgramaElements();
		this.pEjecucion = new EjecucionElements();
		this.pDeclaraciones = new DeclaracionesElements();
		this.pSimple = new SimpleElements();
		this.pImprimible = new ImprimibleElements();
		this.pNoImprimible = new NoImprimibleElements();
		this.pExpr = new ExprElements();
		this.pDataType_ = new DataType_Elements();
		this.pMyInt = new MyIntElements();
		this.pMyString = new MyStringElements();
		this.pMyBool = new MyBoolElements();
		this.pIsDataType = new IsDataTypeElements();
		this.pAritmetica = new AritmeticaElements();
		this.pOperadores = new OperadoresElements();
		this.pVariables = new VariablesElements();
		this.pBoolean_Op = new Boolean_OpElements();
		this.pBool = new BoolElements();
		this.pEstructuras = new EstructurasElements();
		this.pList = new ListElements();
		this.pLargoLista = new LargoListaElements();
		this.pCombinarLista = new CombinarListaElements();
		this.pPosicionLista = new PosicionListaElements();
		this.pAtributo = new AtributoElements();
		this.pFuncionSimplificada = new FuncionSimplificadaElements();
		this.pEqual = new EqualElements();
		this.pIf = new IfElements();
		this.pBloque = new BloqueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.isc.Compilacion".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Lista de any no
	////cond define else keywords
	//Programa:
	// //  '#lang racket'
	//     'Programa' name = ID
	//    (declaraciones += Declaraciones)*
	//    (ejecuciones += Ejecucion)*
	//;
	public ProgramaElements getProgramaAccess() {
		return pPrograma;
	}
	
	public ParserRule getProgramaRule() {
		return getProgramaAccess().getRule();
	}
	
	//Ejecucion:
	//    '>' Expr
	//;
	public EjecucionElements getEjecucionAccess() {
		return pEjecucion;
	}
	
	public ParserRule getEjecucionRule() {
		return getEjecucionAccess().getRule();
	}
	
	//Declaraciones:
	//    Simple
	//;
	public DeclaracionesElements getDeclaracionesAccess() {
		return pDeclaraciones;
	}
	
	public ParserRule getDeclaracionesRule() {
		return getDeclaracionesAccess().getRule();
	}
	
	//Simple:
	//    Expr | Estructuras
	//;
	public SimpleElements getSimpleAccess() {
		return pSimple;
	}
	
	public ParserRule getSimpleRule() {
		return getSimpleAccess().getRule();
	}
	
	//Imprimible:
	//    '>' (var=[Variables] |fun=[FuncionSimplificada])
	//;
	public ImprimibleElements getImprimibleAccess() {
		return pImprimible;
	}
	
	public ParserRule getImprimibleRule() {
		return getImprimibleAccess().getRule();
	}
	
	//NoImprimible:
	//    var=[Variables] | fun=[FuncionSimplificada]
	//;
	public NoImprimibleElements getNoImprimibleAccess() {
		return pNoImprimible;
	}
	
	public ParserRule getNoImprimibleRule() {
		return getNoImprimibleAccess().getRule();
	}
	
	//Expr:
	//    (DataType_ | Aritmetica | Equal  | Variables | FuncionSimplificada  )
	//;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//DataType_:
	//     ( MyInt | MyString | MyBool | List)
	//;
	public DataType_Elements getDataType_Access() {
		return pDataType_;
	}
	
	public ParserRule getDataType_Rule() {
		return getDataType_Access().getRule();
	}
	
	//MyInt:
	//    value = INT
	//;
	public MyIntElements getMyIntAccess() {
		return pMyInt;
	}
	
	public ParserRule getMyIntRule() {
		return getMyIntAccess().getRule();
	}
	
	//MyString:
	//    value = STRING
	//;
	public MyStringElements getMyStringAccess() {
		return pMyString;
	}
	
	public ParserRule getMyStringRule() {
		return getMyStringAccess().getRule();
	}
	
	//MyBool: /////////
	//    value = Bool
	//;
	public MyBoolElements getMyBoolAccess() {
		return pMyBool;
	}
	
	public ParserRule getMyBoolRule() {
		return getMyBoolAccess().getRule();
	}
	
	//IsDataType:
	//    '(' ('number?' | 'string?' | 'list?' ) isType=DataType_ ')'//???? no se
	//;
	public IsDataTypeElements getIsDataTypeAccess() {
		return pIsDataType;
	}
	
	public ParserRule getIsDataTypeRule() {
		return getIsDataTypeAccess().getRule();
	}
	
	//Aritmetica:
	//    '(' op = Operadores (argument+=(MyInt))+ ')' //revisar + - * / aceptan si es solo un int pero los obligaremos a que sea dos //PREGUNTAR llamar funciones
	//        //el problema es que expt quotient remainder solo aceptan dos INT
	//;
	public AritmeticaElements getAritmeticaAccess() {
		return pAritmetica;
	}
	
	public ParserRule getAritmeticaRule() {
		return getAritmeticaAccess().getRule();
	}
	
	//Operadores:
	//    op = ('+' | '-' | '*' | '/' | 'expt' | 'quotient' | 'remainder')//revisar PREGUNTAR
	//;
	public OperadoresElements getOperadoresAccess() {
		return pOperadores;
	}
	
	public ParserRule getOperadoresRule() {
		return getOperadoresAccess().getRule();
	}
	
	//Variables:
	//( '(' 'define' name=ID val = DataType_ ')')  //supercheck
	//;
	public VariablesElements getVariablesAccess() {
		return pVariables;
	}
	
	public ParserRule getVariablesRule() {
		return getVariablesAccess().getRule();
	}
	
	//Boolean_Op:
	//    op = ('<' | '>=' | '>' | '<=' )
	//;
	public Boolean_OpElements getBoolean_OpAccess() {
		return pBoolean_Op;
	}
	
	public ParserRule getBoolean_OpRule() {
		return getBoolean_OpAccess().getRule();
	}
	
	//Bool:
	//    op = ('#T' | '#F' | '#t' | '#f' | '#true' | '#false' | 'true' | 'false')
	//;
	public BoolElements getBoolAccess() {
		return pBool;
	}
	
	public ParserRule getBoolRule() {
		return getBoolAccess().getRule();
	}
	
	//Estructuras:
	//     If   //por ver
	//;
	public EstructurasElements getEstructurasAccess() {
		return pEstructuras;
	}
	
	public ParserRule getEstructurasRule() {
		return getEstructurasAccess().getRule();
	}
	
	//List:
	//     {List}    '(''list'  (typeOfList+=DataType_)+ ')'
	//    //{List}'(''list'  typeOfList = ( (INT)+ | (STRING)+ | (Bool)+ | (List)+ ) ')'
	//;
	public ListElements getListAccess() {
		return pList;
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}
	
	//LargoLista:
	//    '(' 'lenght' List ')'//PREGUNTAR
	//;
	public LargoListaElements getLargoListaAccess() {
		return pLargoLista;
	}
	
	public ParserRule getLargoListaRule() {
		return getLargoListaAccess().getRule();
	}
	
	//CombinarLista:
	//    'comb'//TODO
	//;
	public CombinarListaElements getCombinarListaAccess() {
		return pCombinarLista;
	}
	
	public ParserRule getCombinarListaRule() {
		return getCombinarListaAccess().getRule();
	}
	
	//PosicionLista:
	//    'pos' //TODO
	//;
	public PosicionListaElements getPosicionListaAccess() {
		return pPosicionLista;
	}
	
	public ParserRule getPosicionListaRule() {
		return getPosicionListaAccess().getRule();
	}
	
	//Atributo:// aun por ver
	//    (atributoName=ID)
	//;
	public AtributoElements getAtributoAccess() {
		return pAtributo;
	}
	
	public ParserRule getAtributoRule() {
		return getAtributoAccess().getRule();
	}
	
	//FuncionSimplificada:
	//    '(' 'define' '(' name=ID (atributo+=DataType_)*')' '(' then=Bloque ')' ')'//revisar    PREGUNTAR
	//;
	public FuncionSimplificadaElements getFuncionSimplificadaAccess() {
		return pFuncionSimplificada;
	}
	
	public ParserRule getFuncionSimplificadaRule() {
		return getFuncionSimplificadaAccess().getRule();
	}
	
	//Equal:
	//    '(' (('equal?' | 'eq?') n1=DataType_ n2=DataType_) | (Boolean_Op INT INT)')'//revisar equal de listas co
	//        //n = no da con eq? da #f con equal? da #t podria hacer que en validation no deje usar equal si usa =
	//;
	public EqualElements getEqualAccess() {
		return pEqual;
	}
	
	public ParserRule getEqualRule() {
		return getEqualAccess().getRule();
	}
	
	////BooleanExpression:
	////    Boolean_Op expr1=Expr expr2=Expr  //no se para que es esto
	////;
	//If://check
	//    '(' 'if' '(' condition = Equal ')'
	//        ('(')? then = Bloque (')')?
	//        '(' else = Bloque ')' ')'
	//;
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Bloque:
	//    Simple
	//;
	public BloqueElements getBloqueAccess() {
		return pBloque;
	}
	
	public ParserRule getBloqueRule() {
		return getBloqueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
