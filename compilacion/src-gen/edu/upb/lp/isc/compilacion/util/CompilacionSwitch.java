/**
 * generated by Xtext 2.25.0
 */
package edu.upb.lp.isc.compilacion.util;

import edu.upb.lp.isc.compilacion.*;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see edu.upb.lp.isc.compilacion.CompilacionPackage
 * @generated
 */
public class CompilacionSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static CompilacionPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CompilacionSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = CompilacionPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case CompilacionPackage.PROGRAMA:
      {
        Programa programa = (Programa)theEObject;
        T result = casePrograma(programa);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.EJECUCION:
      {
        Ejecucion ejecucion = (Ejecucion)theEObject;
        T result = caseEjecucion(ejecucion);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.DECLARACIONES:
      {
        Declaraciones declaraciones = (Declaraciones)theEObject;
        T result = caseDeclaraciones(declaraciones);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.SIMPLE:
      {
        Simple simple = (Simple)theEObject;
        T result = caseSimple(simple);
        if (result == null) result = caseDeclaraciones(simple);
        if (result == null) result = caseBloque(simple);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.IMPRIMIBLE:
      {
        Imprimible imprimible = (Imprimible)theEObject;
        T result = caseImprimible(imprimible);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.NO_IMPRIMIBLE:
      {
        NoImprimible noImprimible = (NoImprimible)theEObject;
        T result = caseNoImprimible(noImprimible);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.EXPR:
      {
        Expr expr = (Expr)theEObject;
        T result = caseExpr(expr);
        if (result == null) result = caseEjecucion(expr);
        if (result == null) result = caseSimple(expr);
        if (result == null) result = caseDeclaraciones(expr);
        if (result == null) result = caseBloque(expr);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.DATA_TYPE_:
      {
        DataType_ dataType_ = (DataType_)theEObject;
        T result = caseDataType_(dataType_);
        if (result == null) result = caseExpr(dataType_);
        if (result == null) result = caseEjecucion(dataType_);
        if (result == null) result = caseSimple(dataType_);
        if (result == null) result = caseDeclaraciones(dataType_);
        if (result == null) result = caseBloque(dataType_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.MY_INT:
      {
        MyInt myInt = (MyInt)theEObject;
        T result = caseMyInt(myInt);
        if (result == null) result = caseDataType_(myInt);
        if (result == null) result = caseExpr(myInt);
        if (result == null) result = caseEjecucion(myInt);
        if (result == null) result = caseSimple(myInt);
        if (result == null) result = caseDeclaraciones(myInt);
        if (result == null) result = caseBloque(myInt);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.MY_STRING:
      {
        MyString myString = (MyString)theEObject;
        T result = caseMyString(myString);
        if (result == null) result = caseDataType_(myString);
        if (result == null) result = caseExpr(myString);
        if (result == null) result = caseEjecucion(myString);
        if (result == null) result = caseSimple(myString);
        if (result == null) result = caseDeclaraciones(myString);
        if (result == null) result = caseBloque(myString);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.MY_BOOL:
      {
        MyBool myBool = (MyBool)theEObject;
        T result = caseMyBool(myBool);
        if (result == null) result = caseDataType_(myBool);
        if (result == null) result = caseExpr(myBool);
        if (result == null) result = caseEjecucion(myBool);
        if (result == null) result = caseSimple(myBool);
        if (result == null) result = caseDeclaraciones(myBool);
        if (result == null) result = caseBloque(myBool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.IS_DATA_TYPE:
      {
        IsDataType isDataType = (IsDataType)theEObject;
        T result = caseIsDataType(isDataType);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.ARITMETICA:
      {
        Aritmetica aritmetica = (Aritmetica)theEObject;
        T result = caseAritmetica(aritmetica);
        if (result == null) result = caseExpr(aritmetica);
        if (result == null) result = caseEjecucion(aritmetica);
        if (result == null) result = caseSimple(aritmetica);
        if (result == null) result = caseDeclaraciones(aritmetica);
        if (result == null) result = caseBloque(aritmetica);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.OPERADORES:
      {
        Operadores operadores = (Operadores)theEObject;
        T result = caseOperadores(operadores);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.VARIABLES:
      {
        Variables variables = (Variables)theEObject;
        T result = caseVariables(variables);
        if (result == null) result = caseExpr(variables);
        if (result == null) result = caseEjecucion(variables);
        if (result == null) result = caseSimple(variables);
        if (result == null) result = caseDeclaraciones(variables);
        if (result == null) result = caseBloque(variables);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.BOOLEAN_OP:
      {
        Boolean_Op boolean_Op = (Boolean_Op)theEObject;
        T result = caseBoolean_Op(boolean_Op);
        if (result == null) result = caseEqual(boolean_Op);
        if (result == null) result = caseExpr(boolean_Op);
        if (result == null) result = caseEjecucion(boolean_Op);
        if (result == null) result = caseSimple(boolean_Op);
        if (result == null) result = caseDeclaraciones(boolean_Op);
        if (result == null) result = caseBloque(boolean_Op);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.BOOL:
      {
        Bool bool = (Bool)theEObject;
        T result = caseBool(bool);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.ESTRUCTURAS:
      {
        Estructuras estructuras = (Estructuras)theEObject;
        T result = caseEstructuras(estructuras);
        if (result == null) result = caseSimple(estructuras);
        if (result == null) result = caseDeclaraciones(estructuras);
        if (result == null) result = caseBloque(estructuras);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.LIST:
      {
        List list = (List)theEObject;
        T result = caseList(list);
        if (result == null) result = caseDataType_(list);
        if (result == null) result = caseLargoLista(list);
        if (result == null) result = caseExpr(list);
        if (result == null) result = caseEjecucion(list);
        if (result == null) result = caseSimple(list);
        if (result == null) result = caseDeclaraciones(list);
        if (result == null) result = caseBloque(list);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.LARGO_LISTA:
      {
        LargoLista largoLista = (LargoLista)theEObject;
        T result = caseLargoLista(largoLista);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.ATRIBUTO:
      {
        Atributo atributo = (Atributo)theEObject;
        T result = caseAtributo(atributo);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.FUNCION_SIMPLIFICADA:
      {
        FuncionSimplificada funcionSimplificada = (FuncionSimplificada)theEObject;
        T result = caseFuncionSimplificada(funcionSimplificada);
        if (result == null) result = caseExpr(funcionSimplificada);
        if (result == null) result = caseEjecucion(funcionSimplificada);
        if (result == null) result = caseSimple(funcionSimplificada);
        if (result == null) result = caseDeclaraciones(funcionSimplificada);
        if (result == null) result = caseBloque(funcionSimplificada);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.EQUAL:
      {
        Equal equal = (Equal)theEObject;
        T result = caseEqual(equal);
        if (result == null) result = caseExpr(equal);
        if (result == null) result = caseEjecucion(equal);
        if (result == null) result = caseSimple(equal);
        if (result == null) result = caseDeclaraciones(equal);
        if (result == null) result = caseBloque(equal);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.IF:
      {
        If if_ = (If)theEObject;
        T result = caseIf(if_);
        if (result == null) result = caseEstructuras(if_);
        if (result == null) result = caseSimple(if_);
        if (result == null) result = caseDeclaraciones(if_);
        if (result == null) result = caseBloque(if_);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case CompilacionPackage.BLOQUE:
      {
        Bloque bloque = (Bloque)theEObject;
        T result = caseBloque(bloque);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Programa</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Programa</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePrograma(Programa object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Ejecucion</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Ejecucion</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEjecucion(Ejecucion object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Declaraciones</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Declaraciones</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDeclaraciones(Declaraciones object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimple(Simple object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Imprimible</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Imprimible</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImprimible(Imprimible object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>No Imprimible</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>No Imprimible</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNoImprimible(NoImprimible object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Expr</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Expr</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseExpr(Expr object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Data Type </em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Data Type </em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseDataType_(DataType_ object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>My Int</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>My Int</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMyInt(MyInt object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>My String</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>My String</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMyString(MyString object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>My Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>My Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseMyBool(MyBool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Is Data Type</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Is Data Type</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIsDataType(IsDataType object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Aritmetica</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Aritmetica</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAritmetica(Aritmetica object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Operadores</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Operadores</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseOperadores(Operadores object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Variables</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Variables</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseVariables(Variables object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Boolean Op</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Boolean Op</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBoolean_Op(Boolean_Op object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bool</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bool</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBool(Bool object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Estructuras</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Estructuras</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEstructuras(Estructuras object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>List</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>List</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseList(List object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Largo Lista</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Largo Lista</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLargoLista(LargoLista object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Atributo</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Atributo</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAtributo(Atributo object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Funcion Simplificada</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Funcion Simplificada</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseFuncionSimplificada(FuncionSimplificada object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Equal</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Equal</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseEqual(Equal object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>If</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>If</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseIf(If object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Bloque</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Bloque</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseBloque(Bloque object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //CompilacionSwitch
